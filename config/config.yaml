core:
  log:
    dir: "@jinja {{env.CORE_LOG_DIR or '/data/logs'}}"
  storage:
    file:
      dir: "@jinja {{env.CORE_STORAGE_FILE_DIR or '/data/storage'}}"

models:
  large: "@jinja {{env.LLM_MODEL_LARGE or 'openai:gpt-4.1'}}"
  small: "@jinja {{env.LLM_MODEL_SMALL or 'openai:gpt-4.1-mini'}}"

providers:
  devops:
    url: "@jinja {{ env.get('AZURE_URL', '') }}"
    organization: "@jinja {{ env.get('AZURE_DEVOPS_ORGANIZATION', '') }}"
    project: "@jinja {{ env.get('AZURE_DEVOPS_PROJECT', '') }}"
    pat: "@jinja {{ env.get('AZURE_DEVOPS_PAT', '') }}"
    repoId: "@jinja {{ env.get('AZURE_DEVOPS_REPOID', '') }}"
    mock: "@jinja {{ env.get('AZURE_DEVOPS_MOCK', 'False') }}"
  gitlab:
    api_url: "@jinja {{ env.get('GITLAB_API_URL', '') }}"
    project_id: "@jinja {{ env.get('GITLAB_PROJECT_ID', '') }}"
    token: "@jinja {{ env.get('GITLAB_TOKEN', '') }}"
    mock: "@jinja {{ env.get('GITLAB_MOCK', 'False') }}"

projects:
  default:
    git:
      path: "@jinja {{env.GIT_REPO_PATH or '/code'}}"
      defaultBranch: "main"
      autoPull: "@jinja {{env.GIT_AUTOPULL or 'false'}}"
      pullIntervalSeconds: "@jinja {{env.GIT_PULL_INTERVAL_SECONDS or 120}}"
    pullrequests:
      devops:
        url: "@jinja {{ this.providers.devops.url }}"
        organization: "@jinja {{ this.providers.devops.organization }}"
        project: "@jinja {{ this.providers.devops.project }}"
        pat: "@jinja {{ this.providers.devops.pat }}"
        repoId: "@jinja {{ this.providers.devops.repoId }}"
        mock: "@jinja {{ this.providers.devops.mock }}"
      gitlab:
        api_url: "@jinja {{ this.providers.gitlab.api_url }}"
        project_id: "@jinja {{ this.providers.gitlab.project_id }}"
        token: "@jinja {{ this.providers.gitlab.token }}"
        mock: "@jinja {{ this.providers.gitlab.mock }}"
    issues:
      devops:
        url: "@jinja {{ this.providers.devops.url }}"
        organization: "@jinja {{ this.providers.devops.organization }}"
        project: "@jinja {{ this.providers.devops.project }}"
        pat: "@jinja {{ this.providers.devops.pat }}"
        repoId: "@jinja {{ this.providers.devops.repoId }}"
        mock: "@jinja {{ this.providers.devops.mock }}"
      gitlab:
        api_url: "@jinja {{ this.providers.gitlab.api_url }}"
        project_id: "@jinja {{ this.providers.gitlab.project_id }}"
        token: "@jinja {{ this.providers.gitlab.token }}"
        mock: "@jinja {{ this.providers.gitlab.mock }}"

slack:
  bot:
    botToken:    "@jinja {{ env.SLACK_BOT_TOKEN or '' }}"
    channelId:   "@jinja {{ env.SLACK_CHANNEL_ID or '' }}"
    appToken:    "@jinja {{ env.SLACK_APP_TOKEN or '' }}"
    processingTimeout: "@jinja {{ env.SLACK_PROCESSING_TIMEOUT or 6000 }}"

agui:
  server:
    host: "@jinja {{env.AGUI_HOST or '0.0.0.0'}}"
    port: "@jinja {{env.AGUI_PORT or 8000}}"
    reload: "@jinja {{env.AGUI_RELOAD or false}}"
  agent:
    defaultTimeout: "@jinja {{env.AGUI_DEFAULT_TIMEOUT or 300}}"
    defaultAgentType: "@jinja {{env.AGUI_DEFAULT_AGENT_TYPE or 'chatbot'}}"
    maxMessageLength: "@jinja {{env.AGUI_MAX_MESSAGE_LENGTH or 10000}}"

cli:
  agent:
    defaultAgentType: "@jinja {{env.CLI_DEFAULT_AGENT_TYPE or 'gitchatbot'}}"

agents:
  gitchatbot:
    model: "@jinja {{ this.models.large }}"
    maxTokens: 2000
    temperature: 0.7
    timeoutSeconds: 60

subagents:
  impactanalysis:
    maxFiles: "@jinja {{env.IMPACT_ANALYSIS_MAX_FILES or 200}}"
    retries: 3
    model: "@jinja {{ this.models.large }}"
    fileClassification:
      frontendPatterns:
        - '.*\.(js|ts|jsx|tsx)$'                    # JavaScript/TypeScript files
        - '.*\.(html|htm)$'                         # HTML files
        - '.*\.(css|scss|sass|less|styl)$'          # Style files
        - '.*\.(vue|svelte)$'                       # Framework files
        - '.*/src/app/.*'                            # Angular app files
        - '.*/components?/.*\.(js|ts|jsx|tsx)$'      # Component files
        - '.*/pages/.*\.(js|ts|jsx|tsx)$'           # Next.js/Nuxt pages
        - '.*/views/.*\.(js|ts|jsx|tsx|vue)$'       # Vue.js views
        - '.*/public/.*'                             # Static assets
        - '.*/assets/.*'                             # Frontend assets
        - '.*/styles?/.*'                            # Style directories
        - '.*/static/.*'                             # Static files
        - '.*\.(json)$.*/(public|assets|static)/'   # Frontend config files
      backendPatterns:
        - '.*\.(cs|java|py|php|rb|go|rs)$'          # Server language files
        - '.*Controller\.(cs|java|py)$'             # Controllers
        - '.*/Controllers?/.*\.(cs|java|py)$'        # Controller directories
        - '.*/Models?/.*\.(cs|java|py)$'             # Model files
        - '.*/DTOs?/.*\.(cs|java|py)$'               # DTO files
        - '.*/Contracts?/.*\.(cs|java|py)$'          # Contract files
        - '.*/Services?/.*\.(cs|java|py|js|ts)$'     # Service files
        - '.*/api/.*\.(js|ts|py|cs|java|php|rb|go)$' # API routes
        - '.*appsettings.*\.json$'                   # Configuration files
        - '.*\.(sql|csproj|pom\.xml|requirements\.txt|Gemfile|go\.mod|Cargo\.toml)$' # Project/DB files
        - '.*/server/.*'                             # Server directories
        - '.*/backend/.*'                            # Backend directories
        - '.*/src/main/.*\.(java|kt)$'               # Java/Kotlin main sources
  coderesearch:
    model: "@jinja {{ this.models.small }}"
